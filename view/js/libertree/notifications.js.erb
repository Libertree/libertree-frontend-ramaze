$( function() {
  Libertree.Notifications = {};

  Vue.component('comp-notif-desc-comment', { template: '#template-notif-desc-comment', inherit: true, replace: true, });
  Vue.component('comp-notif-desc-comment-like', { template: '#template-notif-desc-comment-like', inherit: true, replace: true, });
  Vue.component('comp-notif-desc-post-like', { template: '#template-notif-desc-post-like', inherit: true, replace: true, });

  /* ----------------------------- */

  Vue.component('comp-notification-group', {
    template: '#template-notification-group',
    data: function() {
      return {
        expectingUpdate: false,
      };
    },
    computed: {
      currentAccountId: function() { return Libertree.currentAccountId; },
      ids: function() {
        return jQuery.map(this.group, function(notif) { return notif.id; } );
      },
      hasUnseenNotifications: function() {
        var has = false;
        /* TODO: Should this just be plain jQuery.each?  I don't think this grep is being used as a grep */
        jQuery.grep(this.group, function(notif) {
          has = has || ! notif.seen
        } );
        return has;
      },
      actorNames: function() {
        return Libertree.uniq(
          jQuery.map(this.group, function(notif) {
            return notif.actor.nameDisplay;
          } )
        );
      },
      actorsPhrase: function() {
        return Libertree.andedList(this.actorNames);
      },
      plurality: function() {
        return this.actorNames.length == 1 ? 'singular' : 'plural';
      },
      link: function() { return this.group[0].link; },
      glimpse: function() { return this.group[0].glimpse; },
      ago: function() { return this.group[0].ago; },
      actor: function() { return this.group[0].actor; },
      commentPostMemberAccountId: function() { return this.group[0].comment ? this.group[0].comment.post.member.accountId : null; },
      commentPostMemberNameDisplay: function() { return this.group[0].comment ? this.group[0].comment.post.member.nameDisplay : null; },
      postMemberAccountId: function() { return this.group[0].post ? this.group[0].post.member.accountId : null; },
      postMemberNameDisplay: function() { return this.group[0].post ? this.group[0].post.member.nameDisplay: null; },
      type: function() { return this.group[0].type; },
      innerComponent: function() {
        switch( this.type ) {
          case 'comment':
            return 'comp-notif-desc-comment';
          case 'comment-like':
            return 'comp-notif-desc-comment-like';
          case 'post-like':
            return 'comp-notif-desc-post-like';
          /* TODO: the others */
        }
      },
      /* I18n: function() { return Libertree.I18n; } */
    },
    methods: {
      toggleState: function(ev) {
        /* ev.stopPropagation(); */
        ev.preventDefault();

        var href = $(ev.target).attr('href');

        ev.targetVM.expectingUpdate = true;

        /* We don't update the UI ourselves here, we let it come after the websocket message */

        var newState = ev.targetVM.group[0].seen ? 'unseen' : 'seen'
        $.get('/notifications/'+newState+'/' + ev.targetVM.ids.join('/'), function(data) {
          /* resume link following when the GET request is complete */
          if (href) { window.location = href; }
        } );
      }
    },
  });

  /* ----------------------------- */

  /* This data hash is shared between two Vue.js syncers:
  the notifications icon/popup and the notifications page. */
  Libertree.Notifications.data = {
    notifications: [],
    windowVisible: false,
    fetchingData: false,
    /* TODO: static title until further notice, due to i18n */
    /* (this is not impossible to make dynamic, it's just that it's a bit of work.  :) ) */
    /* TODO: clear title if it is out of sync with the real number of unseen notifs */
    /* This could be done with, say, a titleN data attribute */
    title: <%=
      (
        account.num_notifications_unseen == 0 ?
        _('No notifications') :
        n_('1 notification', '%d notifications', account.num_notifications_unseen) % account.num_notifications_unseen
      ).to_json
    %>,
  };

  Libertree.Notifications.notificationsSyncer = new Vue({
    el: '#notifications-icon-and-window',
    data: Libertree.Notifications.data,
    computed: {
      notificationGroups: function() {
        var grouped = {},
          keys = [], // so we have a display order
          unseenNotifs = jQuery.grep( this.notifications, function(notif) {
            return ! notif.seen;
          } );

        jQuery.each( unseenNotifs, function(i, notif) {
          // collect by target and type; we don't want to but comment
          // and post like notifs in the same bin
          key = [notif.targetIdentifier, notif.type];
          if( grouped[key] ) {
            grouped[key].push(notif);
          } else {
            grouped[key] = [];
            grouped[key].push(notif);
            keys.push(key);
          }
        } );

        // get the groups in order of keys
        return jQuery.map( keys, function(k) {
          return [grouped[k]]; // Extra nesting: http://stackoverflow.com/questions/703355
        } );
      },
      n: function() {
        var count = 0;
        jQuery.each(this.notificationGroups, function(i, group) {
          count += group.length;
        } );
        return count;
      },
    },
    methods: {
      refresh: function() {
        var self = this;
        self.fetchingData = true;
        $.get('/vue-api/notifications', function(data) {
          self.notifications = data;
          self.fetchingData = false;
        });
      },
      onIconClick: function(ev) {
        ev.stopPropagation();
        ev.preventDefault();
        var syncer = this;

        if( syncer.windowVisible ) {
          syncer.windowVisible = false;
          Libertree.UI.hideWindows();
          return;
        } // else we now show the unseen notifications list

        if( syncer.n == 0 ) {
          window.location = '/notifications';
          return;
        }

        /* TODO: Is this update-on-click necessary?  Shouldn't our Vue.js awesomeness obviate this? */
        /* syncer.notifications = []; */
        Libertree.UI.hideWindows();
        syncer.fetchingData = true;
        syncer.windowVisible = true;

        $.get('/vue-api/notifications', function(data) {
          syncer.notifications = data;
          syncer.fetchingData = false;
        });
      },
      updatePageTitle: function(new_value) {
        /* TODO: In VueJS 0.11+, we will have a vm.$interpolate() method available
        which will obviate most of this complicated string manipulation. */
        var title = document.title;
        if( new_value === '0' ) {
          title = title.replace( /^\([0-9]+\) /, '' );
        } else {
          title = title.replace( /^\([0-9]+\)/, '('+new_value+')' );
          if( ! title.match(/^\([0-9]+\)/) ) {
            title = '('+new_value+') ' + title;
          }
        }
        document.title = title;
      },
    },
    ready: function() {
      this.$watch('n', this.updatePageTitle);
    },
  });

  Libertree.Notifications.notificationsPageSyncer = new Vue({
    el: '#notifications-list',
    data: Libertree.Notifications.data,
    computed: {
      notificationGroups: function() {
        return jQuery.map(this.notifications, function(notif) {
          return [[notif]];  // Double brackets: http://stackoverflow.com/questions/703355
        } );
      },
      n: function() {
        return this.notifications.length;
      },
    },
  });

  Libertree.Notifications.notificationsSyncer.refresh();
} );
