$( function() {
  Libertree.Notifications = {

    setState: function (new_state) {
      var old_state = (new_state === 'seen') ? 'unseen' : 'seen';
      return function (event) {
        event.preventDefault();
        var ids = $(this).data('notification-ids'),
            target = $(event.target).attr('href');

        $(this).removeClass(old_state).addClass(new_state);
        /* Also toggle on Notifications page */
        $.each( ids, function(j, id) {
          $('.notification[data-notification-ids="['+id+']"]').removeClass(old_state).addClass(new_state);
        } );

        $.get('/notifications/'+new_state+'/' + ids.join('/'), function(data) {
          /* resume link following when the GET request is complete */
          if (target) { window.location = target; }
        } );
      };
    },
  };

  Libertree.Notifications.notificationsSyncer = new Vue({
    el: '#menu-notifications',
    data: {
      n: <%= account.num_notifications_unseen %>,
      title: "<%= account.num_notifications_unseen == 0 ? _('No notifications') : n_('1 notification', '%d notifications', account.num_notifications_unseen) % account.num_notifications_unseen %>"
    },
    methods: {
      onClick: function(ev) {
        ev.stopPropagation();
        ev.preventDefault();

        if( $('#notifications-window').is(':visible') ) {
          Libertree.UI.hideWindows();
          return;
        }

        if( this.n == 0 ) {
          window.location = '/notifications';
          return;
        }

        Libertree.UI.hideWindows();
        $('#notifications-window').empty();
        Libertree.UI.addSpinner('#notifications-window', 'append');
        $('#notifications-window').
          load(
            '/notifications/_index',
            function(html) {
              Libertree.Session.ensureAlive(html);
              Libertree.UI.removeSpinner('#notifications-window');
            }
          ).toggle();

        return;
      },
      onServerUpdate: function(data) {
        this.n = data.n;
        this.title = data.iconTitle;
      },
      updatePageTitle: function(new_value) {
        /* In VueJS 0.11+, we will have a vm.$interpolate() method available
        which will obviate most of this complicated string manipulation. */
        var title = document.title;
        if( new_value === '0' ) {
          title = title.replace( /^\([0-9]+\) /, '' );
        } else {
          title = title.replace( /^\([0-9]+\)/, '('+new_value+')' );
          if( ! title.match(/^\([0-9]+\)/) ) {
            title = '('+new_value+') ' + title;
          }
        }
        document.title = title;
      }
    },
    ready: function() {
      this.$watch('n', this.updatePageTitle);
    }
  });

  /* ----------------------------- */

  Vue.component('comp-notif-desc-comment', {
    template: '#template-notif-desc-comment',
    inherit: true,
    replace: true,
  });

  Vue.component('comp-notif-comment-link', {
    template: '<a href="#link-to-comment-" title="{{glimpse}}">click here</a>',
    inherit: true,
    replace: true,
  });

  /* TODO: Make a generic function for substituting positional parameters */
  /* See: http://slexaxton.github.io/Jed/ */
  var partialBody;

  /* TODO: DRY this up! */
  partialBody = Libertree.I18n['commented-on-your-post-singular'];
  partialBody = partialBody.replace(/%1\$s/, '{{actorsPhrase}}');
  // TODO: href = #{ comment_link(@subject) }
  partialBody = partialBody.replace(/%2\$s/, '<a href="{{link}}" title="{{glimpse}}">');
  partialBody = partialBody.replace(/%3\$s/, '</a>');
  Vue.partial( 'partial-i18n-commented-on-your-post-singular', partialBody );

  partialBody = Libertree.I18n['commented-on-post-singular'];
  partialBody = partialBody.replace(/%1\$s/, '{{actorsPhrase}}');
  // TODO: href = #{ comment_link(@subject) }
  partialBody = partialBody.replace(/%2\$s/, '{{postMemberNameDisplay}}');
  partialBody = partialBody.replace(/%3\$s/, '<a href="{{link}}" title="{{glimpse}}">');
  partialBody = partialBody.replace(/%4\$s/, '</a>');
  Vue.partial( 'partial-i18n-commented-on-post-singular', partialBody );

  partialBody = Libertree.I18n['commented-on-your-post-plural'];
  partialBody = partialBody.replace(/%1\$s/, '{{actorsPhrase}}');
  // TODO: href = #{ comment_link(@subject) }
  partialBody = partialBody.replace(/%2\$s/, '<a href="{{link}}" title="{{glimpse}}">');
  partialBody = partialBody.replace(/%3\$s/, '</a>');
  Vue.partial( 'partial-i18n-commented-on-your-post-plural', partialBody );

  partialBody = Libertree.I18n['commented-on-post-plural'];
  partialBody = partialBody.replace(/%1\$s/, '{{actorsPhrase}}');
  // TODO: href = #{ comment_link(@subject) }
  partialBody = partialBody.replace(/%2\$s/, '{{postMemberNameDisplay}}');
  partialBody = partialBody.replace(/%3\$s/, '<a href="{{link}}" title="{{glimpse}}">');
  partialBody = partialBody.replace(/%4\$s/, '</a>');
  Vue.partial( 'partial-i18n-commented-on-post-plural', partialBody );

  Vue.component('comp-notification-group', {
    template: '#template-notification-group',
    computed: {
      currentAccountId: function() { return Libertree.currentAccountId; },
      ids: function() {
        return jQuery.map(this.group, function(notif) { return notif.id; } );
      },
      idList: function() {
        return JSON.stringify(this.ids);
      },
      hasUnseenNotifications: function() {
        var has = false;
        jQuery.grep(this.group, function(notif) {
          has = has || ! notif.seen
        } );
        return has;
      },
      actorNames: function() {
        return Libertree.uniq(
          jQuery.map(this.group, function(notif) {
            return notif.actorName;
          } )
        );
      },
      actorsPhrase: function() {
        return Libertree.andedList(this.actorNames);
      },
      plurality: function() {
        return this.actorNames.length == 1 ? 'singular' : 'plural';
      },
      glimpse: function() { return this.group[0].glimpse; },
      ago: function() { return this.group[0].ago; },
      member: function() { return this.group[0].member; },
      postMemberAccountId: function() { return this.group[0].post.member.accountId; },
      postMemberNameDisplay: function() { return this.group[0].post.member.nameDisplay; },
      innerComponent: function() {
        return 'comp-notif-desc-comment';
      },
      /* I18n: function() { return Libertree.I18n; } */
    },
  /* notif = notifications[0] */
  /* sg_or_pl = actor_array.uniq.length == 1 ? "singular" : "plural" */
  });

  /* TODO: To be renamed or consolidated with other syncer */
  Libertree.Notifications.notificationsPageSyncer = new Vue({
    el: '#notifications-list',
    data: {
      notificationGroups: [
        [
          {
            glimpse: "notif A",
            seen: true,
            actorName: "Pistos",
            ago: "1 hour ago",
            member: {
              id: 1,
              handle: 'pistos@maple.libertreeproject.org',
              nameDisplay: 'Pistos',
            },
            link: '/posts/show/15080/38754#comment-38754',
            post: {
              member: {
                accountId: 1,
                nameDisplay: 'Pistos'
              }
            }
          },
          {
            glimpse: "notif B",
            seen: true,
            actorName: "rekado",
            ago: "10 minutes ago",
            member: {
              id: 2,
              handle: 'rekado@maple.libertreeproject.org',
              nameDisplay: 'rekado',
            },
            link: '/posts/show/15080/38754#comment-38754',
            post: {
              member: {
                accountId: 1,
                nameDisplay: 'Pistos'
              }
            }
          }
        ],
        [
          {
            glimpse: "notif C",
            seen: true,
            actorName: "Paks",
            ago: "36 minutes ago",
            member: {
              id: 3,
              handle: 'paks@maple.libertreeproject.org',
              nameDisplay: 'Paks',
            },
            link: '/posts/show/15080/38754#comment-38754',
            post: {
              member: {
                accountId: 1,
                nameDisplay: 'Pistos'
              }
            }
          },
          {
            glimpse: "notif D",
            seen: false,
            actorName: "Genius Musings",
            ago: "28 minutes ago",
            member: {
              id: 4,
              handle: 'genius@maple.libertreeproject.org',
              nameDisplay: 'Genius Musings',
            },
            link: '/posts/show/15080/38754#comment-38754',
            post: {
              member: {
                accountId: 1,
                nameDisplay: 'Pistos'
              }
            }
          },
          {
            glimpse: "notif E",
            seen: true,
            actorName: "LNXWALT",
            ago: "22 minutes ago",
            member: {
              id: 5,
              handle: 'pistos@maple.libertreeproject.org',
              nameDisplay: 'LNXWALT',
            },
            link: '/posts/show/15080/38754#comment-38754',
            post: {
              member: {
                accountId: 1,
                nameDisplay: 'Pistos'
              }
            }
          }
        ],
        [
          {
            glimpse: "notif F",
            seen: false,
            actorName: "Sue",
            ago: "2 days ago",
            member: {
              id: 6,
              handle: 'pistos@maple.libertreeproject.org',
              nameDisplay: 'Sue',
            },
            link: '/posts/show/15080/38754#comment-38754',
            post: {
              member: {
                accountId: 1,
                nameDisplay: 'Pistos'
              }
            }
          },
          {
            glimpse: "notif G",
            seen: false,
            actorName: "MarSee",
            ago: "1 day ago",
            member: {
              id: 7,
              handle: 'pistos@maple.libertreeproject.org',
              nameDisplay: 'MarSee',
            },
            link: '/posts/show/15080/38754#comment-38754',
            post: {
              member: {
                accountId: 1,
                nameDisplay: 'Pistos'
              }
            }
          }
        ]
      ]
    },
  });

  $.get('/vue-api/notifications?only-unseen=false', function(data) {
    Libertree.Notifications.notificationsPageSyncer.notificationGroups = data;
  });
} );
