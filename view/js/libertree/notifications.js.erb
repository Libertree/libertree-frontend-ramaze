$( function() {
  Libertree.Notifications = {

    setState: function (new_state) {
      var old_state = (new_state === 'seen') ? 'unseen' : 'seen';
      return function (event) {
        event.preventDefault();
        var ids = $(this).data('notification-ids'),
            target = $(event.target).attr('href');

        $(this).removeClass(old_state).addClass(new_state);
        /* Also toggle on Notifications page */
        $.each( ids, function(j, id) {
          $('.notification[data-notification-ids="['+id+']"]').removeClass(old_state).addClass(new_state);
        } );
        $.get('/notifications/'+new_state+'/' + ids.join('/'), function(data) {
          Libertree.Notifications.updateNumUnseen(data);
          /* resume link following when the GET request is complete */
          if (target) { window.location = target; }
        } );
      };
    },

    // n is of type string
    updateNumUnseen: function(n) {
      var title = document.title;
      if( n === '0' ) {
        /* $('#num-notifications-unseen').hide(); */
        title = title.replace( /^\([0-9]+\) /, '' );
      } else {
        /* $('#num-notifications-unseen').show(); */
        title = title.replace( /^\([0-9]+\)/, '('+n+')' );
        if( ! title.match(/^\([0-9]+\)/) ) {
          title = '('+n+') ' + title;
        }
      }
      document.title = title;
      Libertree.Notifications.notificationsSyncer.n = n;
    },

  };

  Libertree.Notifications.notificationsSyncer = new Vue({
    el: '#menu-notifications',
    data: {
      n: <%= account.num_notifications_unseen %>,
      title: "<%= account.num_notifications_unseen == 0 ? _('No notifications') : n_('1 notification', '%d notifications', account.num_notifications_unseen) % account.num_notifications_unseen %>"
    },
    methods: {
      onClick: function(ev) {
        ev.stopPropagation();
        ev.preventDefault();

        if( $('#notifications-window').is(':visible') ) {
          Libertree.UI.hideWindows();
          return;
        }

        if( this.n == 0 ) {
          window.location = '/notifications';
          return;
        }

        Libertree.UI.hideWindows();
        $('#notifications-window').empty();
        Libertree.UI.addSpinner('#notifications-window', 'append');
        $('#notifications-window').
          load(
            '/notifications/_index',
            function(html) {
              Libertree.Session.ensureAlive(html);
              Libertree.UI.removeSpinner('#notifications-window');
              Libertree.Notifications.updateNumUnseen( $( $.trim(html) ).find('.n').text() );
            }
          ).toggle();

        return;
      },
      onServerUpdate: function(data) {
        this.n = data.n;
        this.title = data.title;
      }
    }
  });

} );
